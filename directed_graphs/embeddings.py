# AUTOGENERATED! DO NOT EDIT! File to edit: 06_DeepWalk_with_Backwards_Connection.ipynb (unless otherwise specified).

__all__ = ['node2vec_and_plot', 'deepwalk_and_pca_plot']

# Cell
from node2vec import Node2Vec
from sklearn.decomposition import PCA

def node2vec_and_plot(data,n_clusters,title=""):
  G_nx = to_networkx(data, to_undirected=False)
  n_points = data.x.shape[1]
  node2vec2 = Node2Vec(G_nx, dimensions=64, walk_length=30, num_walks=200, workers=4)  # Use temp_folder for big graphs
  # Embed nodes
  model = node2vec2.fit(window=10, min_count=1, batch_words=4)  # Any keywords acceptable by gensim.Word2Vec can be passed, `dimensions` and `workers` are automatically passed (from the Node2Vec constructor)
  # Get words
  wordlist = [str(i) for i in range(n_points)]
  clusters = np.repeat(list(range(n_clusters)),n_points/n_clusters)
  # Extract embeddings
  ems = model.wv[wordlist]
  print("performing PCA...")
  pca = PCA(n_components=2)
  clusters = np.repeat(list(range(n_clusters)),n_points/n_clusters)
  pcs = pca.fit_transform(ems)
  plt.figure()
  scatter = plt.scatter(pcs[:,0],pcs[:,1],c=clusters)
  plt.legend(handles = scatter.legend_elements()[0], title="Blobs", labels=list(range(n_clusters)))
  plt.suptitle(title)
  return word2vec_embeddings


# Cell
import numpy as np
import matplotlib.pyplot as plt
from karateclub import DeepWalk
from sklearn.decomposition import PCA
from torch_geometric.utils import to_networkx

def deepwalk_and_pca_plot(data,n_clusters,title="",to_undirected=False):
  G_nx = to_networkx(data, to_undirected=to_undirected)
  n_points = data.x.shape[1]
  # Embed nodes
  model = DeepWalk(walk_length=10, dimensions=64, window_size=5)
  model.fit(G_nx)
  embedding = model.get_embedding()
  # Define clusters
  clusters = np.repeat(list(range(n_clusters)),n_points/n_clusters)
  # Visualize
  print("performing PCA...")
  pca = PCA(n_components=2)
  clusters = np.repeat(list(range(n_clusters)),n_points/n_clusters)
  pcs = pca.fit_transform(embedding)
  plt.figure()
  scatter = plt.scatter(pcs[:,0],pcs[:,1],c=clusters)
  plt.legend(handles = scatter.legend_elements()[0], title="Blobs", labels=list(range(n_clusters)))
  plt.suptitle(title)
  return embedding