# AUTOGENERATED! DO NOT EDIT! File to edit: 05d02 Flow Neighbor Loss on Toy Datasets.ipynb (unless otherwise specified).

__all__ = ['FlowEmbedderAroundDiffusionMap']

# Cell
from .diffusion_distance_flow_embedder import FixedDiffusionMapEmbedding
from .multiscale_flow_embedder import MultiscaleDiffusionFlowEmbedder
from .flow_embedding_training_utils import (
    FETrainer,
    visualize_points,
    save_embedding_visualization,
)
from .diffusion_flow_embedding import (
    affinity_matrix_from_pointset_to_pointset,
)
import torch.nn.functional as F
import torch

class FlowEmbedderAroundDiffusionMap(FETrainer):
    def __init__(
        self,
        X,
        flows,
        labels,
        device=torch.device("cuda" if torch.cuda.is_available() else "cpu"),
        sigma_graph=2.13,
        flow_strength_graph=1,
    ):
        super().__init__(X, flows, labels, device=device)
        self.vizfiz = [
            save_embedding_visualization,
            # visualize_points,
        ]
        loss_weights = {
            "diffusion": 0,
            "smoothness": 0,
            "reconstruction": 0,
            "diffusion map regularization": 0,
            "flow cosine loss": 0,
            "flow neighbor loss": 1,
        }
        P_graph = affinity_matrix_from_pointset_to_pointset(
            X, X, flows, sigma=sigma_graph, flow_strength=0
        )
        P_graph = F.normalize(P_graph, p=1, dim=1)
        self.FE = MultiscaleDiffusionFlowEmbedder(
            X=X,
            flows=flows,
            ts=[1],
            sigma_graph=sigma_graph,
            flow_strength_graph=flow_strength_graph,
            device=device,
            use_embedding_grid=False,
            embedder=FixedDiffusionMapEmbedding(X, t=1, k=18, device=device),
            loss_weights = loss_weights
        ).to(device)
        self.title = "Flow Neighbor w Fixed Diffusion Map"
        self.epochs_between_visualization = 1
        self.total_epochs = 1000
