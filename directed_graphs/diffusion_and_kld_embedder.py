# AUTOGENERATED! DO NOT EDIT! File to edit: 05c05 Diffusion Distance based Loss - Tests and Visualizations.ipynb (unless otherwise specified).

__all__ = ['DiffusionDistanceFlowEmbedder']

# Cell
import torch
from .diffusion_distance_flow_embedder import compare_distance_matrices
import matplotlib.pyplot as plt
from .multiscale_flow_embedder import MultiscaleDiffusionFlowEmbedder
from .flow_embedding_training_utils import FETrainer, visualize_points, save_embedding_visualization
class DiffusionDistanceFlowEmbedder(FETrainer):
    def __init__(self, X, flows, labels, device = torch.device("cuda" if torch.cuda.is_available() else "cpu")):
        super().__init__(X, flows, labels, device = device)
        self.vizfiz = [
            save_embedding_visualization,
            visualize_points,
            compare_distance_matrices,
        ]
        loss_weights = {
            "diffusion":1,
            "smoothness":0,
            "reconstruction":0,
            "diffusion map regularization":20,
            "flow cosine loss": 0,
        }
        self.FE = MultiscaleDiffusionFlowEmbedder(
            X = X,
            ts = [1],
            flows = flows,
            sigma_graph = 1,
            flow_strength_graph = 1,
            device = device,
            use_embedding_grid = False,
            loss_weights = loss_weights,
            k_dmap = 18,
            t_dmap = 50,
            dmap_coords_to_use = 2,

        ).to(device)
        # visualize diffusion map
        plt.scatter(self.FE.diff_coords[:,0].cpu().numpy(),self.FE.diff_coords[:,1].cpu().numpy(),c=labels)
        self.title = "Diffusion Distance FE"
