# AUTOGENERATED! DO NOT EDIT! File to edit: 04 UW_Manifold_Based_Directed_Embedding.ipynb (unless otherwise specified).

__all__ = ['directed_diffusion_map']

# Cell
import logging
def directed_diffusion_map(W, t = 1, kernel_type = "anisotropic", alpha = 0.5, sigma = "automatic", k = 10):

  Dists = distance_matrix(X)
  if sigma == "automatic":
    # Heuristic for sigma: median of the distance to the kth nearest neighbor
    sigma = np.median(np.partition(Dists,k)[:,k])
    print("using sigma = ",sigma)
  W = anisotropic_kernel(Dists, sigma=sigma, alpha = alpha)
  P_symmetric, D = diffusion_matrix(W, symmetric=True, return_degree=True)
  diff_map = diffusion_coordinates(P_symmetric, D, t = t)
  diff_map = diff_map[:,::-1]
  diff_map = diff_map.T
  return diff_map